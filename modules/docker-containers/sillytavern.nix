# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  ...
}: {
  # Create a variable for the current immich version
  # Caddy config for Immich
  services.caddy = {
    enable = true;
    virtualHosts."silly.footvaalvica.com".extraConfig = ''
      reverse_proxy localhost:42069
    '';
    acmeCA = "https://acme-v02.api.letsencrypt.org/directory";
  };

  services.cloudflare-dyndns.domains = ["silly.footvaalvica.com"];

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  virtualisation.oci-containers.containers."sillytavern" = {
    image = "ghcr.io/sillytavern/sillytavern:latest";
    environment = {
      "FORCE_COLOR" = "1";
      "NODE_ENV" = "production";
      "SILLYTAVERN_ENABLEUSERACCOUNTS" = "true";
      "SILLYTAVERN_PERUSERBASICAUTH" = "true";
      "SILLYTAVERN_ENABLEDISCREETLOGIN" = "true";
      "SILLYTAVERN_ENABLESERVERPLUGINS" = "true";
      "SILLYTAVERN_LISTEN" = "true";
      "SILLYTAVERN_PORT" = "42069";
      "SILLYTAVERN_WHITELISTMODE" = "false";
      "SILLYTAVERN_BASICAUTHMODE" = "true";
      "SILLYTAVERN_EXTENSIONS_ENABLED" = "true";
    };
    volumes = [
      "/home/mateusp/nix-config/modules/docker-containers/sillytavern/config:/home/node/app/config:rw"
      "/home/mateusp/nix-config/modules/docker-containers/sillytavern/data:/home/node/app/data:rw"
      "/home/mateusp/nix-config/modules/docker-containers/sillytavern/extensions:/home/node/app/public/scripts/extensions/third-party:rw"
      "/home/mateusp/nix-config/modules/docker-containers/sillytavern/plugins:/home/node/app/plugins:rw"
    ];
    ports = [
      "42069:42069/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--hostname=sillytavern"
      "--network-alias=sillytavern"
      "--network=sillytavern_default"
    ];
  };
  systemd.services."docker-sillytavern" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-sillytavern_default.service"
    ];
    requires = [
      "docker-network-sillytavern_default.service"
    ];
    partOf = [
      "docker-compose-sillytavern-root.target"
    ];
    wantedBy = [
      "docker-compose-sillytavern-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-sillytavern_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f sillytavern_default";
    };
    script = ''
      docker network inspect sillytavern_default || docker network create sillytavern_default
    '';
    partOf = ["docker-compose-sillytavern-root.target"];
    wantedBy = ["docker-compose-sillytavern-root.target"];
  };

  # Builds
  systemd.services."docker-build-sillytavern" = {
    path = [pkgs.docker pkgs.git];
    serviceConfig = {
      Type = "oneshot";
      TimeoutSec = 300;
    };
    script = ''
      cd /home/mateusp/nix-config/modules
      docker build -t ghcr.io/sillytavern/sillytavern:latest .
    '';
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-sillytavern-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
